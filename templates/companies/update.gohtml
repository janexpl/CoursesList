{{ define "companies/update" }}
<h1>Aktualizuj dane</h1>

<form class="needs-validation border border-light p-5" novalidate method="post" action="/companies/update/process">
    <div class="form-row">
        <div class="col-md-12 mb-2">
            <label for="name">Nazwa firmy</label>
            <input type="text" class="form-control" name="name" id="name"  placeholder="Wpisz nazwę" required value="{{ .Data.Name }}">
            <div class="invalid-feedback">
                Wpisz nazwę firmy
            </div>
        </div>  
      </div>
      <div class="form-row">
        <div class="col-md-3 mb-2">
            <label for="street">Ulica</label>
            <input type="text" class="form-control" name="street" id="street"  placeholder="Wpisz adres" value="{{ .Data.Street }}" required>
            <div class="invalid-feedback">
                  Uzupełnij ulicę
                </div>
        </div>  
        <div class="col-md-3 mb-2">
            <label for="city">Miejscowość</label>
            <input type="text" class="form-control" name="city" id="city"  placeholder="Wpisz miejscowość" value="{{ .Data.City }}" required>
            <div class="invalid-feedback">
              Uzupełnij miejscowość
            </div>
        </div> 
        <div class="col-md-3 mb-2">
            <label for="zipcode">Kod pocztowy</label>
            <input type="text" class="form-control" name="zipcode" id="zipcode"  placeholder="Wpisz kod pocztowy" value="{{ .Data.Zipcode }}" required>
            <div class="invalid-feedback">
                Wpisz kod pocztowy
            </div>
        </div> 
        <div class="col-md-3 mb-2">
            <label for="nip">NIP</label>
            <input type="text" class="form-control" name="nip" id="nip"  placeholder="Nip w formacie 1234567890" value="{{ .Data.Nip }}" required>
            <div class="invalid-feedback">
                Wpisz nip
            </div>
        </div> 
    </div>
    <div class="form-row">
        <div class="col-md-4 mb-3">
            <label for="email">Email</label>
            <input type="email" class="form-control" name="email" id="email"  value="{{ .Data.Email }}" placeholder="Wpisz email do kontaktu" >
            
        </div>  
        <div class="col-md-4 mb-3">
            <label for="contactperson">Osoba kontaktowa</label>
            <input type="text" class="form-control" name="contactperson" id="contactperson"  value="{{ .Data.ContactPerson }}" placeholder="Imię nazwisko osoby kontaktowej" >
            
        </div>  
        <div class="col-md-4 mb-3">
            <label for="telephone">Telefon kontaktowy</label>
            <input type="tel" class="form-control" name="telephone" id="telephone"  value="{{ .Data.TelephoneNo }}" placeholder="Wpisz telefon kontaktowy" >
            <div class="invalid-feedback">
                Wpisz telefon kontaktowy
            </div>
        </div>  
        </div>
		  <div class="form-row">
			<div class="col-md-6 mb-3 ">
          <label for="person-select">Osoba odpowiedzialna</label>
          <select
            id="person-select"
            name="person"
            class="form-control"
            title="Wybierz osobę odpowiedzialną">
				 {{ if ne .Data.Person.ID.Int64 0 }}
					 <!--<option selected value="{{ .Data.Person.ID.Int64 }}">{{ .Data.Person.Firstname.String }} {{ .Data.Person.Lastname.String }}</option>-->
				 {{ end }}
			 </select>
        </div>
        </div>
        <div class="form-row">
            <div class="col-md-12 mb-3">
                <label for="note">Notatki</label>
                <textarea name="note" id="note" cols="1000" rows="5" value="{{ .Data.Note }}" class="form-control"></textarea>
            </div>  
        </div>
          <button type="submit" class="btn btn-primary">Zapisz</button>
        </form>
        <script type="text/javascript">
        (function() {
    'use strict';
    window.addEventListener('load', function() {
      // Fetch all the forms we want to apply custom Bootstrap validation styles to
      var forms = document.getElementsByClassName('needs-validation');
      // Loop over them and prevent submission
      var validation = Array.prototype.filter.call(forms, function(form) {
        form.addEventListener('submit', function(event) {
          if (form.checkValidity() === false) {
            event.preventDefault();
            event.stopPropagation();
          }
          form.classList.add('was-validated');
        }, false);
      });
    }, false);
  })();
  // Pobieranie userów do selecta
  var $personselect = $('#person-select').selectize({
    valueField: 'id',
    searchField: ['firstname','lastname'],
    create : false,
	 render: {
          option: function(data, escape) {
            var bdate = new Date(data.Birthdate);

            return (
              '<div class="option">' +
              '<span class="firstname">' +
              escape(data.firstname) +
              " </span>" +
              '<span class="lastname">' +
              escape(data.lastname) +
              " </span></div>"
            );
          },
          item: function(data, escape) {
            return (
              '<div class="item">' +
              escape(data.firstname) +
              " " +
              escape(data.lastname) +
              "</div>"
            );
          }
        },
      load: function(query, callback) {
      if (!query.length) return callback();
      $.ajax({
          url: '/users/json',
          type: 'GET',
          dataType: 'json',
          error: function() {
              callback();
          },
          success: function(res) {
              callback(res);
          }
      });
    },
onInitialize: function(){
var selectize = this;
$.ajax({
          url: '/users/json',
          type: 'GET',
          dataType: 'json',
          error: function() {
              
          },
          success: function(res) {
              selectize.addOption(res);
				  selectize.setValue({{ .Data.Person.ID }});	
          }
      });

}
  });
	</script>
  
      

{{ end }}
