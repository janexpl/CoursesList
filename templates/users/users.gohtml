{{ define "users/users" }}
<div id="app">
  <v-app>
    <v-content>
      <v-toolbar flat color="white">
        <v-toolbar-title>Użytkownicy</v-toolbar-title>
        <v-divider class="mx-2" inset vertical></v-divider>
        <v-spacer></v-spacer>
        <span style="display:inline-block;margin-right:50px;width:250px;">
        <v-text-field
          v-model="search"
          append-icon="search"
          label="Szukaj"
          single-line
          hide-details
        ></v-text-field>
        </span>
        <v-dialog v-model="dialog" max-width="500px">
            <v-btn slot="activator" fab lighth color="primary">
                <v-icon dark>add</v-icon>
            </v-btn>
          <!-- <v-btn slot="activator" color="primary" dark class="mb-2"
            >Nowy użytkownik</v-btn
          > -->
          <v-card>
            <v-card-title>
              <span class="headline">${ formTitle }</span>
            </v-card-title>
            <v-card-text>
              <v-form ref="form" v-model="valid" lazy-validation>
              <v-container grid-list-md>
                <v-layout wrap>
                  <v-flex xs12 sm6 md6>
                    <v-text-field
                      v-model="editedItem.firstname"
                      label="Imię"
                      :rules="nameRules"
                      required
                    ></v-text-field>
                  </v-flex>
                  <v-flex xs12 sm6 md6>
                    <v-text-field
                      v-model="editedItem.lastname"
                      label="Nazwisko"
                      :rules="nameRules"
                      required
                    ></v-text-field>
                  </v-flex>
                  <v-flex xs12>
                    <v-text-field
                      v-model="editedItem.email"
                      label="Email"
                      :rules="emailRules"
                      required
                    ></v-text-field>
                  </v-flex>
                  <v-flex xs12 sm6 md6>
                    <v-text-field
                      v-model="editedItem.password"
                      label="Hasło"
                      type="password"
                      :rules="passwordRules"
                      required
                    ></v-text-field>
                  </v-flex>
                  <v-flex xs12 sm6 md4>
                    <v-checkbox 
                      v-model="editedItem.role"
                      label="Administrator"
                    ></v-checkbox>
                  </v-flex>
                </v-layout>
              </v-container>
            </v-form>
            </v-card-text>

            <v-card-actions>
              <v-spacer></v-spacer>
              <v-btn color="blue darken-1" flat @click="close">Anuluj</v-btn>
              <v-btn color="blue darken-1" :disabled="!valid" flat @click="save">Zapisz</v-btn>
            </v-card-actions>
          </v-card>
        </v-dialog>
      </v-toolbar>
      <v-data-table :headers="headers" :items="users" class="elevation-1" :search="search">
        <template slot="items" slot-scope="props">
          <td>${ props.item.firstname }</td>
          <td class="text-xs-left">${ props.item.lastname }</td>
          <td class="text-xs-left">${ props.item.email }</td>
          <td class="text-xs-left"><v-icon v-if="props.item.role === 1">done</v-icon></td>
          <td class="justify-center layout px-0">
            <v-icon small class="mr-2" @click="editItem(props.item)">
              edit
            </v-icon>
            <v-icon small @click="deleteItem(props.item)"> delete </v-icon>
          </td>
        </template>
        <template slot="no-data">
          <v-btn color="primary" @click="initialize">Reset</v-btn>
        </template>
      </v-data-table>
      
    </v-content>
  </v-app>
</div>
<script>
    Vue.use(Vuetify, {
      theme: {
        primary: '#3f51b5', // #E53935
        secondary: '#E57373', // 
        accent: '#3F51B5' // #3F51B5
      }
    });
    new Vue({ el: '#app',
    delimiters: ['${', '}'],
    data: () => ({
      search: '',
      valid: false,
      nameRules: [
        v => !!v || 'Uzupełnij dane',
      ],
      emailRules: [
        v => !!v || 'E-mail jest wymagany',
        v => /.+@.+/.test(v) || 'E-mail musi być poprawny'
      ],
      passwordRules: [
        v => !!v || 'Hasło jest wymagane',
      ],
      dialog: false,
      headers: [
        {
          text: 'Imię',
          align: 'left',
          sortable: false,
          value: 'firstname'
        },
        { text: 'Nazwisko', value: 'lastname' },
        { text: 'Email', value: 'email' },
        { text: 'Administrator', value: 'role' },
        { text: 'Actions', value: 'name', sortable: false }
      ],
      users: [],
      editedIndex: -1,
      editedItem: {
        id: 0,
        firstname: '',
        lastname: '',
        email: '',
        password: '',
        role: false
      },
      defaultItem: {
        id: 0,
        firstname: '',
        lastname: '',
        email: '',
        password: '',
        role: false
      }
    }),

    computed: {
      formTitle () {
        return this.editedIndex === -1 ? 'Nowy użytkownik' : 'Edycja'
      }
    },

    watch: {
      dialog (val) {
        val || this.close()
      }
    },

    created () {
      this.initialize()
    },

    methods: {
      initialize () {
        axios
        .get('/users/json')
        .then((response) => {
            this.users = response.data;
        })
      },
      editItem (item) {
        this.editedIndex = this.users.indexOf(item)
        this.editedItem = Object.assign({}, item)
        this.dialog = true
      },

      deleteItem (item) {
        const index = this.users.indexOf(item)
        confirm('Are you sure you want to delete this item?') && this.users.splice(index, 1)
        console.log(item);
        axios
        .delete('/users/json', {
          params: {
           id: item.id
          }
        })
        .catch(function (error) {
            console.log(error);
        });
      },
      close () {
        this.dialog = false
        setTimeout(() => {
          this.editedItem = Object.assign({}, this.defaultItem)
          this.editedIndex = -1
        }, 300)
      },
      save () {
        if (this.$refs.form.validate()) {
        this.editedItem.role = this.editedItem.role === true ? 1 : 0
        if (this.editedIndex > -1) {
          Object.assign(this.users[this.editedIndex], this.editedItem)
          axios
          .put('/users/json', {
            id: this.editedItem.id,
            firstname: this.editedItem.firstname,
            lastname: this.editedItem.lastname,
            spassword: this.editedItem.password,
            email: this.editedItem.email,
            role: this.editedItem.role
          })
          .then(function (response) {
            this.editedItem.id = response.data.id; 
            // console.log(this.users);
          })
          .catch(function (error) {
            console.log(error);
          });
        } else {
          console.log(this.editedItem)
          axios
          .post('/users/json', {
            firstname: this.editedItem.firstname,
            lastname: this.editedItem.lastname,
            spassword: this.editedItem.password,
            email: this.editedItem.email,
            role: this.editedItem.role
          })
          .then(function (response) {
            this.editedItem.id = response.data.id; 
            // console.log(this.users);
          })
          .catch(function (error) {
            console.log(error);
          });
          this.users.push(this.editedItem);

        }
        this.close()
        }
      }
    }
  });
</script>
<style lang="scss" scoped>
  #app {
    padding: 10px;
  }
</style>
{{ end }}
